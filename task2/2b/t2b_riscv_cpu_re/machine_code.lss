
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
000005c9 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
000005c9  w      .debug_info	00000000 .hidden t1b_path_planner.c.f09086aa
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000800 g       *ABS*	00000000 __flash_size
00000040 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000420 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000418 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000460 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
00000444 g     F .text	0000001c memset
00000054 g     F .text	000003c4 main
00000100 g       *ABS*	00000000 __ram_size
02000100 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
000007a0 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    10010113          	addi	x2,x2,256 # 2000100 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    7a000593          	addi	x11,x0,1952
  1c:	    00000613          	addi	x12,x0,0
  20:	    400000ef          	jal	x1,420 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    410000ef          	jal	x1,444 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    3d8000ef          	jal	x1,418 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__stack_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###         }
     ###     }
     ###     return min_index;
     ### }
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                   be010113          	addi	x2,x2,-1056
     ###     uint8_t path_planned[32];
     ###     // index to keep track of the path_planned array
     ###     uint8_t idx = 0;
     ### 
     ###     // ############# Add your code here #############
     ### uint8_t graph[V][V] = {
  58:	                   38400613          	addi	x12,x0,900
  5c:	                   00000593          	addi	x11,x0,0
  60:	                   08c10513          	addi	x10,x2,140
     ### int main(int argc, char const *argv[]) {
  64:	                   40112e23          	sw	x1,1052(x2)
  68:	                   40812c23          	sw	x8,1048(x2)
  6c:	                   40912a23          	sw	x9,1044(x2)
     ### uint8_t graph[V][V] = {
  70:	                   3d4000ef          	jal	x1,444 <memset>
  74:	                   46000413          	addi	x8,x0,1120
  78:	                   01e00613          	addi	x12,x0,30
  7c:	                   46000593          	addi	x11,x0,1120
  80:	                   08c10513          	addi	x10,x2,140
  84:	                   39c000ef          	jal	x1,420 <memcpy>
  88:	                   01e00613          	addi	x12,x0,30
  8c:	                   02040593          	addi	x11,x8,32
  90:	                   0aa10513          	addi	x10,x2,170
  94:	                   38c000ef          	jal	x1,420 <memcpy>
  98:	                   01e00613          	addi	x12,x0,30
  9c:	                   04040593          	addi	x11,x8,64
  a0:	                   0c810513          	addi	x10,x2,200
  a4:	                   37c000ef          	jal	x1,420 <memcpy>
  a8:	                   01e00613          	addi	x12,x0,30
  ac:	                   06040593          	addi	x11,x8,96
  b0:	                   0e610513          	addi	x10,x2,230
  b4:	                   36c000ef          	jal	x1,420 <memcpy>
  b8:	                   01e00613          	addi	x12,x0,30
  bc:	                   08040593          	addi	x11,x8,128
  c0:	                   10410513          	addi	x10,x2,260
  c4:	                   35c000ef          	jal	x1,420 <memcpy>
  c8:	                   01e00613          	addi	x12,x0,30
  cc:	                   0a040593          	addi	x11,x8,160
  d0:	                   12210513          	addi	x10,x2,290
  d4:	                   34c000ef          	jal	x1,420 <memcpy>
  d8:	                   01e00613          	addi	x12,x0,30
  dc:	                   0c040593          	addi	x11,x8,192
  e0:	                   14010513          	addi	x10,x2,320
  e4:	                   33c000ef          	jal	x1,420 <memcpy>
  e8:	                   01e00613          	addi	x12,x0,30
  ec:	                   0e040593          	addi	x11,x8,224
  f0:	                   15e10513          	addi	x10,x2,350
  f4:	                   32c000ef          	jal	x1,420 <memcpy>
  f8:	                   10040593          	addi	x11,x8,256
  fc:	                   01e00613          	addi	x12,x0,30
 100:	                   17c10513          	addi	x10,x2,380
 104:	                   31c000ef          	jal	x1,420 <memcpy>
 108:	                   56000593          	addi	x11,x0,1376
 10c:	                   01e00613          	addi	x12,x0,30
 110:	                   19a10513          	addi	x10,x2,410
 114:	                   30c000ef          	jal	x1,420 <memcpy>
 118:	                   01e00613          	addi	x12,x0,30
 11c:	                   12040593          	addi	x11,x8,288
 120:	                   1b810513          	addi	x10,x2,440
 124:	                   2fc000ef          	jal	x1,420 <memcpy>
 128:	                   01e00613          	addi	x12,x0,30
 12c:	                   14040593          	addi	x11,x8,320
 130:	                   1d610513          	addi	x10,x2,470
 134:	                   2ec000ef          	jal	x1,420 <memcpy>
 138:	                   01e00613          	addi	x12,x0,30
 13c:	                   16040593          	addi	x11,x8,352
 140:	                   1f410513          	addi	x10,x2,500
 144:	                   2dc000ef          	jal	x1,420 <memcpy>
 148:	                   01e00613          	addi	x12,x0,30
 14c:	                   18040593          	addi	x11,x8,384
 150:	                   21210513          	addi	x10,x2,530
 154:	                   2cc000ef          	jal	x1,420 <memcpy>
 158:	                   01e00613          	addi	x12,x0,30
 15c:	                   1a040593          	addi	x11,x8,416
 160:	                   23010513          	addi	x10,x2,560
 164:	                   2bc000ef          	jal	x1,420 <memcpy>
 168:	                   01e00613          	addi	x12,x0,30
 16c:	                   1c040593          	addi	x11,x8,448
 170:	                   24e10513          	addi	x10,x2,590
 174:	                   2ac000ef          	jal	x1,420 <memcpy>
 178:	                   01e00613          	addi	x12,x0,30
 17c:	                   1e040593          	addi	x11,x8,480
 180:	                   26c10513          	addi	x10,x2,620
 184:	                   29c000ef          	jal	x1,420 <memcpy>
 188:	                   01e00613          	addi	x12,x0,30
 18c:	                   20040593          	addi	x11,x8,512
 190:	                   28a10513          	addi	x10,x2,650
 194:	                   28c000ef          	jal	x1,420 <memcpy>
 198:	                   01e00613          	addi	x12,x0,30
 19c:	                   22040593          	addi	x11,x8,544
 1a0:	                   2a810513          	addi	x10,x2,680
 1a4:	                   27c000ef          	jal	x1,420 <memcpy>
 1a8:	                   01e00613          	addi	x12,x0,30
 1ac:	                   24040593          	addi	x11,x8,576
 1b0:	                   2c610513          	addi	x10,x2,710
 1b4:	                   26c000ef          	jal	x1,420 <memcpy>
 1b8:	                   26040593          	addi	x11,x8,608
 1bc:	                   01e00613          	addi	x12,x0,30
 1c0:	                   2e410513          	addi	x10,x2,740
 1c4:	                   25c000ef          	jal	x1,420 <memcpy>
 1c8:	                   6c000593          	addi	x11,x0,1728
 1cc:	                   01e00613          	addi	x12,x0,30
 1d0:	                   30210513          	addi	x10,x2,770
 1d4:	                   24c000ef          	jal	x1,420 <memcpy>
 1d8:	                   01e00613          	addi	x12,x0,30
 1dc:	                   28040593          	addi	x11,x8,640
 1e0:	                   32010513          	addi	x10,x2,800
 1e4:	                   23c000ef          	jal	x1,420 <memcpy>
 1e8:	                   01e00613          	addi	x12,x0,30
 1ec:	                   2a040593          	addi	x11,x8,672
 1f0:	                   33e10513          	addi	x10,x2,830
 1f4:	                   22c000ef          	jal	x1,420 <memcpy>
 1f8:	                   01e00613          	addi	x12,x0,30
 1fc:	                   2c040593          	addi	x11,x8,704
 200:	                   35c10513          	addi	x10,x2,860
 204:	                   21c000ef          	jal	x1,420 <memcpy>
 208:	                   01e00613          	addi	x12,x0,30
 20c:	                   2e040593          	addi	x11,x8,736
 210:	                   37a10513          	addi	x10,x2,890
 214:	                   20c000ef          	jal	x1,420 <memcpy>
 218:	                   01e00613          	addi	x12,x0,30
 21c:	                   30040593          	addi	x11,x8,768
 220:	                   39810513          	addi	x10,x2,920
 224:	                   1fc000ef          	jal	x1,420 <memcpy>
 228:	                   01e00613          	addi	x12,x0,30
 22c:	                   32040593          	addi	x11,x8,800
 230:	                   3b610513          	addi	x10,x2,950
 234:	                   1ec000ef          	jal	x1,420 <memcpy>
     ###                     };
     ###     uint8_t distance[V];  
     ###     uint8_t spath[V];  
     ###     bool sset[V];
     ###     for (uint8_t i = 0; i < V; i++) {
     ###         distance[i] = UINT8_MAX;
 238:	                   01e00613          	addi	x12,x0,30
 23c:	                   0ff00593          	addi	x11,x0,255
 240:	                   04c10513          	addi	x10,x2,76
 244:	                   200000ef          	jal	x1,444 <memset>
     ###         spath[i] = UINT8_MAX;
 248:	                   01e00613          	addi	x12,x0,30
 24c:	                   0ff00593          	addi	x11,x0,255
 250:	                   02c10513          	addi	x10,x2,44
 254:	                   1f0000ef          	jal	x1,444 <memset>
     ###         sset[i] = false;
 258:	                   01e00613          	addi	x12,x0,30
 25c:	                   00000593          	addi	x11,x0,0
 260:	                   00c10513          	addi	x10,x2,12
 264:	                   1e0000ef          	jal	x1,444 <memset>
     ###     }
     ###     distance[START_POINT] = 0;
 268:	                   020007b7          	lui	x15,0x2000
 26c:	                   0007c783          	lbu	x15,0(x15) # 2000000 <__bss_end>
 270:	                   41010713          	addi	x14,x2,1040
     ### int main(int argc, char const *argv[]) {
 274:	                   00000493          	addi	x9,x0,0
     ###     distance[START_POINT] = 0;
 278:	                   0ff7f793          	andi	x15,x15,255
 27c:	                   00f707b3          	add	x15,x14,x15
 280:	                   c2078e23          	sb	x0,-964(x15)
     ###     uint8_t min = UINT8_MAX, min_index;
 284:	                   0ff00e13          	addi	x28,x0,255
     ###     distance[START_POINT] = 0;
 288:	                   01d00793          	addi	x15,x0,29
     ###     for (uint8_t v = 0; v < V; v++) {
 28c:	                   01e00513          	addi	x10,x0,30
     ### 
     ###     for (uint8_t count = 0; count < V - 1; count++) {
     ###         uint8_t u = minDistance(distance, sset);
     ###         sset[u] = true;
 290:	                   00100313          	addi	x6,x0,1
     ### int main(int argc, char const *argv[]) {
 294:	         /-------> 00000713          	addi	x14,x0,0
     ###     uint8_t min = UINT8_MAX, min_index;
 298:	         |         0ff00693          	addi	x13,x0,255
     ###         if (!sptSet[v] && dist[v] < min) {
 29c:	         |  /----> 00c10613          	addi	x12,x2,12
 2a0:	         |  |      00e60633          	add	x12,x12,x14
 2a4:	         |  |      00064603          	lbu	x12,0(x12)
 2a8:	         |  |      0ff77593          	andi	x11,x14,255
 2ac:	         |  |  /-- 00061e63          	bne	x12,x0,2c8 <__ram_size+0x1c8>
 2b0:	         |  |  |   04c10613          	addi	x12,x2,76
 2b4:	         |  |  |   00e60633          	add	x12,x12,x14
 2b8:	         |  |  |   00064603          	lbu	x12,0(x12)
 2bc:	         |  |  +-- 00d67663          	bgeu	x12,x13,2c8 <__ram_size+0x1c8>
 2c0:	         |  |  |   00058493          	addi	x9,x11,0
 2c4:	         |  |  |   00060693          	addi	x13,x12,0
     ###     for (uint8_t v = 0; v < V; v++) {
 2c8:	         |  |  \-> 00170713          	addi	x14,x14,1
 2cc:	         |  \----- fca718e3          	bne	x14,x10,29c <__ram_size+0x19c>
     ###         sset[u] = true;
 2d0:	         |         41010713          	addi	x14,x2,1040
 2d4:	         |         00449693          	slli	x13,x9,0x4
 2d8:	         |         00970833          	add	x16,x14,x9
 2dc:	         |         409686b3          	sub	x13,x13,x9
 2e0:	         |         be680e23          	sb	x6,-1028(x16)
     ###         for (uint8_t v = 0; v < V; v++) {
 2e4:	         |         04c10593          	addi	x11,x2,76
 2e8:	         |         00169693          	slli	x13,x13,0x1
     ###         sset[u] = true;
 2ec:	         |         00000713          	addi	x14,x0,0
     ###             if (!sset[v] && graph[u][v] && distance[u] != UINT8_MAX && distance[u] + graph[u][v] < distance[v]) {
 2f0:	         |  /----> 00c10613          	addi	x12,x2,12
 2f4:	         |  |      00e60633          	add	x12,x12,x14
 2f8:	         |  |      00064603          	lbu	x12,0(x12)
 2fc:	         |  |  /-- 02061e63          	bne	x12,x0,338 <__ram_size+0x238>
 300:	         |  |  |   08c10893          	addi	x17,x2,140
 304:	         |  |  |   00e68633          	add	x12,x13,x14
 308:	         |  |  |   00c88633          	add	x12,x17,x12
 30c:	         |  |  |   00064883          	lbu	x17,0(x12)
 310:	         |  |  +-- 02088463          	beq	x17,x0,338 <__ram_size+0x238>
 314:	         |  |  |   c3c84603          	lbu	x12,-964(x16)
 318:	         |  |  +-- 03c60063          	beq	x12,x28,338 <__ram_size+0x238>
 31c:	         |  |  |   01160633          	add	x12,x12,x17
 320:	         |  |  |   0005c883          	lbu	x17,0(x11)
 324:	         |  |  +-- 01165a63          	bge	x12,x17,338 <__ram_size+0x238>
     ###                 distance[v] = distance[u] + graph[u][v];
 328:	         |  |  |   00c58023          	sb	x12,0(x11)
     ###                 spath[v] = u;
 32c:	         |  |  |   02c10613          	addi	x12,x2,44
 330:	         |  |  |   00e60633          	add	x12,x12,x14
 334:	         |  |  |   00960023          	sb	x9,0(x12)
     ###         for (uint8_t v = 0; v < V; v++) {
 338:	         |  |  \-> 00170713          	addi	x14,x14,1
 33c:	         |  |      00158593          	addi	x11,x11,1
 340:	         |  \----- faa718e3          	bne	x14,x10,2f0 <__ram_size+0x1f0>
     ###     for (uint8_t count = 0; count < V - 1; count++) {
 344:	         |         fff78793          	addi	x15,x15,-1
 348:	         |         0ff7f793          	andi	x15,x15,255
 34c:	         \-------- f40794e3          	bne	x15,x0,294 <__ram_size+0x194>
     ###             }
     ###         }
     ###     }
     ###     uint8_t current = END_POINT;
 350:	                   02000737          	lui	x14,0x2000
 354:	                   00474683          	lbu	x13,4(x14) # 2000004 <__bss_end+0x4>
     ###     uint8_t length = 0;
     ###     
     ###     while (current != UINT8_MAX) {
 358:	                   0ff00613          	addi	x12,x0,255
     ###     uint8_t length = 0;
 35c:	                   00000713          	addi	x14,x0,0
     ###     uint8_t current = END_POINT;
 360:	                   0ff6f693          	andi	x13,x13,255
     ###     while (current != UINT8_MAX) {
 364:	      /--------/-X 04c69e63          	bne	x13,x12,3c0 <__ram_size+0x2c0>
 368:	      |        |   06c10693          	addi	x13,x2,108
     ###         current = spath[current];
     ###         length++;
     ###     }
     ###     idx = length;
     ###     
     ###     for (uint8_t i = 0; i < length / 2; i++) {
 36c:	      |        |   00175513          	srli	x10,x14,0x1
 370:	      |        |   00e68633          	add	x12,x13,x14
 374:	      |        |   00068593          	addi	x11,x13,0
 378:	/-----|--------|-> fff60613          	addi	x12,x12,-1
 37c:	|     |     /--|-- 06f51463          	bne	x10,x15,3e4 <__ram_size+0x2e4>
     ###         uint8_t temp = path_planned[i];
     ###        path_planned[i] = path_planned[length - i - 1];
     ###         path_planned[length - i - 1] = temp;
     ###     }
     ###     path_planned[length] = UINT8_MAX;
 380:	|     |     |  |   41010793          	addi	x15,x2,1040
 384:	|     |     |  |   fff00693          	addi	x13,x0,-1
 388:	|     |     |  |   00e787b3          	add	x15,x15,x14
 38c:	|     |     |  |   c4d78e23          	sb	x13,-932(x15)
     ### 
     ### 
     ###     // ##############################################
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 390:	|     |     |  |   00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 394:	|     |     |  |   020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 398:	|  /--|--/--|--|-X 06f71663          	bne	x14,x15,404 <__ram_size+0x304>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 39c:	|  |  |  |  |  |   020007b7          	lui	x15,0x2000
 3a0:	|  |  |  |  |  |   00100713          	addi	x14,x0,1
 3a4:	|  |  |  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 3a8:	|  |  |  |  |  |   41c12083          	lw	x1,1052(x2)
 3ac:	|  |  |  |  |  |   41812403          	lw	x8,1048(x2)
 3b0:	|  |  |  |  |  |   41412483          	lw	x9,1044(x2)
 3b4:	|  |  |  |  |  |   00000513          	addi	x10,x0,0
 3b8:	|  |  |  |  |  |   42010113          	addi	x2,x2,1056
 3bc:	|  |  |  |  |  |   00008067          	jalr	x0,0(x1)
     ###         path_planned[length] = current;
 3c0:	|  |  |  |  |  \-> 41010593          	addi	x11,x2,1040
 3c4:	|  |  |  |  |      00e585b3          	add	x11,x11,x14
 3c8:	|  |  |  |  |      c4d58e23          	sb	x13,-932(x11)
     ###         current = spath[current];
 3cc:	|  |  |  |  |      41010593          	addi	x11,x2,1040
 3d0:	|  |  |  |  |      00d586b3          	add	x13,x11,x13
     ###         length++;
 3d4:	|  |  |  |  |      00170713          	addi	x14,x14,1
     ###         current = spath[current];
 3d8:	|  |  |  |  |      c1c6c683          	lbu	x13,-996(x13) # 1fffc1c <__flash_size+0x1fff41c>
     ###         length++;
 3dc:	|  |  |  |  |      0ff77713          	andi	x14,x14,255
 3e0:	|  |  \--|--|----- f85ff06f          	jal	x0,364 <__ram_size+0x264>
     ###        path_planned[i] = path_planned[length - i - 1];
 3e4:	|  |     |  \----> 00064883          	lbu	x17,0(x12)
     ###         uint8_t temp = path_planned[i];
 3e8:	|  |     |         0006c803          	lbu	x16,0(x13)
     ###     for (uint8_t i = 0; i < length / 2; i++) {
 3ec:	|  |     |         00178793          	addi	x15,x15,1
     ###        path_planned[i] = path_planned[length - i - 1];
 3f0:	|  |     |         01168023          	sb	x17,0(x13)
     ###         path_planned[length - i - 1] = temp;
 3f4:	|  |     |         01060023          	sb	x16,0(x12)
     ###     for (uint8_t i = 0; i < length / 2; i++) {
 3f8:	|  |     |         0ff7f793          	andi	x15,x15,255
 3fc:	|  |     |         00168693          	addi	x13,x13,1
 400:	\--|-----|-------- f79ff06f          	jal	x0,378 <__ram_size+0x278>
     ###         NODE_POINT = path_planned[i];
 404:	   |     \-------> 00f58633          	add	x12,x11,x15
 408:	   |               00064603          	lbu	x12,0(x12)
     ###     for (int i = 0; i < idx; ++i) {
 40c:	   |               00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 410:	   |               00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 414:	   \-------------- f85ff06f          	jal	x0,398 <__ram_size+0x298>

00000418 <_set_tls>:
 418:	00050213          	addi	x4,x10,0
 41c:	00008067          	jalr	x0,0(x1)

00000420 <memcpy>:
 420:	       00050313          	addi	x6,x10,0
 424:	/----- 00060e63          	beq	x12,x0,440 <memcpy+0x20>
 428:	|  /-> 00058383          	lb	x7,0(x11)
 42c:	|  |   00730023          	sb	x7,0(x6)
 430:	|  |   fff60613          	addi	x12,x12,-1
 434:	|  |   00130313          	addi	x6,x6,1
 438:	|  |   00158593          	addi	x11,x11,1
 43c:	|  \-- fe0616e3          	bne	x12,x0,428 <memcpy+0x8>
 440:	\----> 00008067          	jalr	x0,0(x1)

00000444 <memset>:
 444:	       00050313          	addi	x6,x10,0
 448:	/----- 00060a63          	beq	x12,x0,45c <memset+0x18>
 44c:	|  /-> 00b30023          	sb	x11,0(x6)
 450:	|  |   fff60613          	addi	x12,x12,-1
 454:	|  |   00130313          	addi	x6,x6,1
 458:	|  \-- fe061ae3          	bne	x12,x0,44c <memset+0x8>
 45c:	\----> 00008067          	jalr	x0,0(x1)

00000460 <__text_end>:
 460:	0100                	c.addi4spn	x8,x2,128
	...
 47e:	0000                	c.unimp
 480:	0001                	c.addi	x0,0
 482:	0001                	c.addi	x0,0
	...
 49c:	0100                	c.addi4spn	x8,x2,128
 49e:	0000                	c.unimp
 4a0:	0100                	c.addi4spn	x8,x2,128
 4a2:	0200                	c.addi4spn	x8,x2,256
 4a4:	0000                	c.unimp
 4a6:	0000                	c.unimp
 4a8:	0002                	c.slli64	x0
	...
 4c2:	0002                	c.slli64	x0
 4c4:	0102                	c.slli64	x2
 4c6:	0005                	c.addi	x0,1
	...
 4e4:	0001                	c.addi	x0,0
	...
 502:	0000                	c.unimp
 504:	0005                	c.addi	x0,1
 506:	0400                	c.addi4spn	x8,x2,512
	...
 524:	0000                	c.unimp
 526:	0004                	0x4
 528:	0001                	c.addi	x0,0
	...
 542:	00000003          	lb	x0,0(x0) # 0 <_start>
 546:	0100                	c.addi4spn	x8,x2,128
 548:	0100                	c.addi4spn	x8,x2,128
 54a:	0000                	c.unimp
 54c:	00000003          	lb	x0,0(x0) # 0 <_start>
	...
 568:	0100                	c.addi4spn	x8,x2,128
	...
 586:	0000                	c.unimp
 588:	00000003          	lb	x0,0(x0) # 0 <_start>
 58c:	0600                	c.addi4spn	x8,x2,768
 58e:	0000                	c.unimp
 590:	0000                	c.unimp
 592:	0600                	c.addi4spn	x8,x2,768
	...
 5ac:	0006                	c.slli	x0,0x1
 5ae:	0005                	c.addi	x0,1
	...
 5cc:	0500                	c.addi4spn	x8,x2,640
 5ce:	0100                	c.addi4spn	x8,x2,128
 5d0:	00000003          	lb	x0,0(x0) # 0 <_start>
	...
 5ec:	0000                	c.unimp
 5ee:	0001                	c.addi	x0,0
	...
 60c:	0000                	c.unimp
 60e:	01000003          	lb	x0,16(x0) # 10 <_start+0x10>
 612:	0006                	c.slli	x0,0x1
	...
 630:	0001                	c.addi	x0,0
	...
 64e:	0000                	c.unimp
 650:	0006                	c.slli	x0,0x1
 652:	0600                	c.addi4spn	x8,x2,768
	...
 66c:	0006                	c.slli	x0,0x1
 66e:	0000                	c.unimp
 670:	0000                	c.unimp
 672:	0006                	c.slli	x0,0x1
 674:	00000003          	lb	x0,0(x0) # 0 <_start>
	...
 690:	0000                	c.unimp
 692:	0300                	c.addi4spn	x8,x2,384
 694:	0100                	c.addi4spn	x8,x2,128
 696:	0000                	c.unimp
 698:	0001                	c.addi	x0,0
 69a:	0000                	c.unimp
 69c:	0300                	c.addi4spn	x8,x2,384
	...
 6b2:	0000                	c.unimp
 6b4:	0001                	c.addi	x0,0
 6b6:	0101                	c.addi	x2,0
	...
 6d4:	0100                	c.addi4spn	x8,x2,128
	...
 6f2:	0000                	c.unimp
 6f4:	0001                	c.addi	x0,0
 6f6:	0000                	c.unimp
 6f8:	0300                	c.addi4spn	x8,x2,384
	...
 716:	0000                	c.unimp
 718:	00040003          	lb	x0,0(x8)
	...
 738:	0400                	c.addi4spn	x8,x2,512
 73a:	0100                	c.addi4spn	x8,x2,128
 73c:	00000003          	lb	x0,0(x0) # 0 <_start>
	...
 758:	0000                	c.unimp
 75a:	0001                	c.addi	x0,0
 75c:	0000                	c.unimp
 75e:	0000                	c.unimp
 760:	0000                	c.unimp
 762:	0100                	c.addi4spn	x8,x2,128
	...
 778:	0000                	c.unimp
 77a:	02000003          	lb	x0,32(x0) # 20 <_start+0x20>
 77e:	0000                	c.unimp
 780:	0100                	c.addi4spn	x8,x2,128
	...
 792:	0000                	c.unimp
 794:	00000003          	lb	x0,0(x0) # 0 <_start>
 798:	0000                	c.unimp
 79a:	0000                	c.unimp
 79c:	0002                	c.slli64	x0
	...
